Q1.
/* 
Account Class:
Defines attributes id, balance, and interestRate.
Provides a constructor to initialize these attributes.
Includes getter and setter methods for each attribute.

Solution Class:
Reads input values (id, balance, interestRate, noOfYears) using Scanner.
Creates an Account object with the read values.
Calls the calculateInterest method to compute the interest based on the provided logic.
Prints the interest amount rounded to three decimal places with the suffix "000".

Calculation Logic:
Calculate the additional rate by multiplying the initial interest rate by the number of years and then dividing by 100.
Add this additional rate to the initial interest rate to get the final interest rate.
Calculate the interest amount by multiplying the balance by the final interest rate and then dividing by 100.
*/

code:
import java.util.Scanner;

class Account {
    private int id;
    private double balance;
    private double interestRate;

    // Constructor
    public Account(int id, double balance, double interestRate) {
        this.id = id;
        this.balance = balance;
        this.interestRate = interestRate;
    }

    // Getters and setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public double getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(double interestRate) {
        this.interestRate = interestRate;
    }
}

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read id, balance, and interestRate
        int id = scanner.nextInt();
        double balance = scanner.nextDouble();
        double interestRate = scanner.nextDouble();
        
        // Create an Account object
        Account account = new Account(id, balance, interestRate);
        
        // Read noOfYears
        int noOfYears = scanner.nextInt();
        
        // Calculate interest
        double interest = calculateInterest(account, noOfYears);
        
        // Print interest amount rounded to three decimal places with suffix "000"
        System.out.printf("%.3f000%n", interest);
        
        scanner.close();
    }
    
    public static double calculateInterest(Account account, int noOfYears) {
        double initialInterestRate = account.getInterestRate();
        double additionalRate = (initialInterestRate / 100) * noOfYears;
        double finalInterestRate = initialInterestRate + additionalRate;
        return account.getBalance() * finalInterestRate / 100;
    }
}


/*
Question 1: Bank Account Operations
Create a class BankAccount with the following attributes:

int accountNumber
String accountHolderName
double balance
Include the following methods:

A constructor to initialize the account with account number, account holder name, and initial balance.
Methods to deposit and withdraw amounts. If withdrawal amount exceeds the balance, display an error message.
A method to display the current balance.
Create a Bank class with a main method to test the BankAccount class by creating an account, depositing and withdrawing money, and displaying the balance.
*/

code:


class BankAccount {
    private int accountNumber;
    private String accountHolderName;
    private double balance;

    public BankAccount(int accountNumber, String accountHolderName, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = initialBalance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn: " + amount);
        } else {
            System.out.println("Invalid or insufficient funds for withdrawal.");
        }
    }

    public void displayBalance() {
        System.out.println("Current balance: " + balance);
    }

    public static void main(String[] args) {
        BankAccount account = new BankAccount(123456, "John Doe", 1000.0);
        account.displayBalance();
        account.deposit(500);
        account.displayBalance();
        account.withdraw(300);
        account.displayBalance();
        account.withdraw(1500); // This should show an error message
    }
}








Question 2: Student Grades Calculation
Create a class Student with the following attributes:

int studentId
String studentName
double[] grades (an array of doubles to store grades)
Include the following methods:

A constructor to initialize the student with ID, name, and an array of grades.
A method to calculate and return the average grade.
A method to display the student's information and average grade.
Create a School class with a main method to create a student object, calculate the average grade, and display the student's details.




Code:
class Student {
    private int studentId;
    private String studentName;
    private double[] grades;

    public Student(int studentId, String studentName, double[] grades) {
        this.studentId = studentId;
        this.studentName = studentName;
        this.grades = grades;
    }

    public double calculateAverageGrade() {
        double sum = 0;
        for (double grade : grades) {
            sum += grade;
        }
        return sum / grades.length;
    }

    public void displayStudentInfo() {
        System.out.println("Student ID: " + studentId);
        System.out.println("Student Name: " + studentName);
        System.out.println("Average Grade: " + calculateAverageGrade());
    }

  
}

public class School{
      public static void main(String[] args) {
        double[] grades = {85.5, 90.0, 78.5, 88.0};
        Student student = new Student(1, "Alice Smith", grades);
        student.displayStudentInfo();
    }
}


Question 3: Employee Salary Calculation
Create a class Employee with the following attributes:

int employeeId
String employeeName
double basicSalary
double hra (House Rent Allowance)
double da (Dearness Allowance)
Include the following methods:

A constructor to initialize the employee with ID, name, basic salary, hra, and da.
A method to calculate and return the total salary (basicSalary + hra + da).
A method to display the employee's information and total salary.
Create a Company class with a main method to create an employee object, calculate the total salary, and display the employee's details.

Question 4: Library Book Management
Create a class Book with the following attributes:

int bookId
String bookTitle
String author
boolean isCheckedOut (indicating if the book is currently checked out)
Include the following methods:

A constructor to initialize the book with ID, title, author, and checked-out status.
Methods to check out and return the book, updating the isCheckedOut status accordingly.
A method to display the book's information.
Create a Library class with a main method to create book objects, check out and return books, and display book details.

Question 5: Simple Calculator
Create a class Calculator with the following methods:

A method add that takes two double parameters and returns their sum.
A method subtract that takes two double parameters and returns their difference.
A method multiply that takes two double parameters and returns their product.
A method divide that takes two double parameters and returns their quotient. If the divisor is zero, display an error message.
Create a Main class with a main method to test the Calculator class by performing various arithmetic operations and displaying the results.





